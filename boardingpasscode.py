# -*- coding: utf-8 -*-
"""boardingpasscode

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T0OmgGe_Bs_F8HL0ots2IKPH5Lmsihkd
"""

#software for boarding pass system
class Passenger: #This line defines a User class
    def __init__(self, FirstName, LastName, ID, PassportNumber, Email, PhoneNumber):#This line uses a constructor that initialzies the attributes with the values passed as attributes
        self.FirstName = FirstName #This line sets the FirstName attribute of the Passenger object to the value passed as the FirstName parameter
        self.LastName = LastName #This line sets the LastName attribute of the Passenger object to the value passed as the LastName parameter
        self.ID = ID #This line sets the ID attribute of the Passenger object to the value passed as the ID parameter
        self.PassportNumber = PassportNumber #This line sets the PassportNumber attribute of the Passenger object to the value passed as the PassportNumber parameter
        self.Email = Email #This line sets the Email attribute of the Passenger object to the value passed as the Email parameter
        self.PhoneNumber = PhoneNumber #This line sets the PhoneNumber attribute of the Passenger object to the value passed as the PhoneNumber parameter
        self.Username = None #These line initialize the Username attribute to None, which can be set later
        self.Password = None #These line initialize the Password attribute to None, which can be set later
#Setter Method for all attributes
    def setFirstName(self, FirstName):
        self.FirstName = FirstName

    def setLastName(self, LastName):
        self.LastName = LastName

    def setUserName(self, Username):
        self.Username = Username

    def setPassword(self, Password):
        self.Password = Password

    def setID(self, ID):
        self.ID = ID

    def setPassportNumber(self, PassportNumber):
        self.PassportNumber = PassportNumber

    def setEmail(self, Email):
        self.Email = Email

    def setPhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
#getter method for all the attributes
    def getFirstName(self):
        return self.FirstName

    def getLastName(self):
        return self.LastName

    def getUserName(self):
        return self.Username

    def getPassword(self):
        return self.Password

    def getID(self):
        return self.ID

    def getPassportNumber(self):
        return self.PassportNumber

    def getEmail(self):
        return self.Email

    def getPhoneNumber(self):
        return self.PhoneNumber

    def reset_password(self, new_password): #This additional function allows the user to reset their password by typing in their new_password
        self.Password = new_password

    def send_verification_email(self): #This additional function sends a verifiction email to the user's email
        print("Verification email sent to:", self.Email)


class BoardingPass:#This line defines a BoardingPass class
    def __init__(self, ticket_number, passenger_name, destination_from, destination_to, seat_number, date, time, gate, terminal, type):#This line uses a constructor that initialzies the attributes with the values passed as attributes
        self.ticket_number = ticket_number #This line sets the ticket_number attribute of the BoardingPass object to the value passed as the ticket_number parameter
        self.passenger_name = passenger_name #This line sets the passenger_name attribute of the BoardingPass object to the value passed as the FirstName parameter
        self.destination_from = destination_from #This line sets the destination_from attribute of the BoardingPass object to the value passed as the destination_from parameter
        self.destination_to = destination_to #This line sets the destination_to attribute of the BoardingPass object to the value passed as the destination_to parameter
        self.seat_number = seat_number #This line sets the seat_number attribute of the BoardingPass object to the value passed as the seat_number parameter
        self.date = date #This line sets the date attribute of the BoardingPass object to the value passed as the date parameter
        self.time = time #This line sets the time attribute of the BoardingPass object to the value passed as the time parameter
        self.gate = gate #This line sets the gate attribute of the BoardingPass object to the value passed as the gate parameter
        self.terminal = terminal #This line sets the terminal attribute of the BoardingPass object to the value passed as the terminal parameter
        self.type = type #This line sets the type attribute of the BoardingPass object to the value passed as the type parameter
#setter method to all attributes
    def setticket_number(self, ticket_number):
        self.ticket_number = ticket_number

    def setpassenger_name(self, passenger_name):
        self.passenger_name = passenger_name

    def setdestination_from(self, destination_from):
        self.destination_from = destination_from

    def setdestination_to(self, destination_to):
        self.destination_to = destination_to

    def setseat_number(self, seat_number):
        self.seat_number = seat_number

    def setdate(self, date):
        self.date = date

    def settime(self, time):
        self.time = time

    def setgate(self, gate):
        self.gate = gate

    def setterminal(self, terminal):
        self.terminal = terminal

    def settype(self, type):
        self.type = type
#getter method to all attributes
    def getticket_number(self):
        return self.ticket_number

    def getpassenger_name(self):
        return self.passenger_name

    def getdestination_from(self):
        return self.destination_from

    def getdestination_to(self):
        return self.destination_to

    def getseat_number(self):
        return self.seat_number

    def getdate(self):
        return self.date

    def gettime(self):
        return self.time

    def getgate(self):
        return self.gate

    def getterminal(self):
        return self.terminal

    def gettype(self):
        return self.type

    def display_boarding_info(self):
        """
        Display all information about the boarding pass.

        Returns:
            boarding_info (str): String containing boarding pass information.
        """
        boarding_info = f"Ticket Number: {self.ticket_number}\n"
        boarding_info += f"Passenger Name: {self.passenger_name}\n"
        boarding_info += f"Destination from: {self.destination_from}\n"
        boarding_info += f"Destination to: {self.destination_to}\n"
        boarding_info += f"Seat Number: {self.seat_number}\n"
        boarding_info += f"Date: {self.date}\n"
        boarding_info += f"Time: {self.time}\n"
        boarding_info += f"Gate: {self.gate}\n"
        boarding_info += f"Terminal: {self.terminal}\n"
        boarding_info += f"Type: {self.type}\n"

        return boarding_info

from datetime import datetime, timedelta
class Flight: #This line defines Flight class
    def __init__(self, flight_number, departure_time, arrival_time, departure_location, arrival_location):#This line uses a constructor that initialzies the attributes with the values passed as attributes
        self.flight_number = flight_number #This line sets the flight_number attribute of the Flight object to the value passed as the flight_number parameter
        self.departure_time = departure_time #This line sets the departure_time attribute of the Flight object to the value passed as the departure_time parameter
        self.arrival_time = arrival_time #This line sets the arrival_time attribute of the Flight object to the value passed as the arrival_time parameter
        self.departure_location = departure_location #This line sets the departure_location attribute of the Flight object to the value passed as the departure_location parameter
        self.arrival_location = arrival_location #This line sets the arrival_location attribute of the Flight object to the value passed as the arrival_location parameter
#setter method to all attributes
    def setflight_number(self, flight_number):
        self.flight_number = flight_number

    def setdeparture_time(self, departure_time):
        self.departure_time = departure_time

    def setarrival_time(self, arrival_time):
        self.arrival_time = arrival_time

    def setdeparture_location(self, departure_location):
        self.departure_location = departure_location

    def setarrival_location(self, arrival_location):
        self.arrival_location = arrival_location
#getter method to all attributes
    def getflight_number(self):
        return self.flight_number

    def getdeparture_time(self):
        return self.departure_time

    def getarrival_time(self):
        return self.arrival_time

    def getdeparture_location(self):
        return self.departure_location

    def getarrival_location(self):
        return self.arrival_location

    def displayFlightinfo(self):#This additional function displays the flight information by printing all the attributes
        """
        Display all information about the flight.

        Returns:
            flight_info (str): String containing flight information.
        """
        flight_info = f"Flight Number: {self.flight_number}\n"
        flight_info += f"Departure Time: {self.departure_time}\n"
        flight_info += f"Arrival Time: {self.arrival_time}\n"
        flight_info += f"Departure Location: {self.departure_location}\n"
        flight_info += f"Arrival Location: {self.arrival_location}\n"

        return flight_info

    def calculate_flight_duration(self):
        """
        Calculate the duration of the flight.

        Returns:
            duration (str): The duration of the flight in hours and minutes.
        """
        # Parse departure and arrival times to datetime objects
        departure_datetime = datetime.strptime(self.departure_time, "%Y-%m-%d %I:%M %p")
        arrival_datetime = datetime.strptime(self.arrival_time, "%Y-%m-%d %I:%M %p")

        # Check if the arrival time is earlier than the departure time, indicating it's on the next day
        if arrival_datetime < departure_datetime:
            # Add 1 day to the arrival time if it's on the next day
            arrival_datetime += timedelta(days=1)

        # Calculate the duration of the flight
        duration = arrival_datetime - departure_datetime

        # Format duration as hours and minutes
        duration_hours = duration.total_seconds() // 3600
        duration_minutes = (duration.total_seconds() % 3600) // 60

        return f"{int(duration_hours)} hours {int(duration_minutes)} minutes"

    def check_delay(self):
        """
        Check if the flight is delayed.

        Returns:
            delay_status (str): A message indicating the delay status.
        """
        # Parse current time
        current_time = datetime.now()

        # Parse departure time to datetime object
        departure_datetime = datetime.strptime(self.departure_time, "%Y-%m-%d %I:%M %p")

        # Check if the flight is delayed
        if current_time > departure_datetime:
            delay_status = "The flight is delayed."
        else:
            delay_status = "The flight is on time."

        return delay_status

class Seat: #This line defines a Seat class
    def __init__(self, seat_number, type, availability, price, assigned_passenger): #This line uses a constructor that initialzies the attributes with the values passed as attributes
        self.seat_number = seat_number #This line sets the seat_number attribute of the Seat object to the value passed as the seat_number parameter
        self.type = type #This line sets the class_type attribute of the Seat object to the value passed as the class_type parameter
        self.availability = availability #This line sets the availability attribute of the Seat object to the value passed as the availability parameter
        self.price = price #This line sets the price attribute of the Seat object to the value passed as the price parameter
        self.assigned_passenger = assigned_passenger #This line sets the assigned_passenger attribute of the Seat object to the value passed as the assigned_passenger parameter
#setter method to all attributes
    def setseat_number(self, seat_number):
        self.seat_number = seat_number

    def settype(self, type):
        self.type = type

    def setavailability(self, availability):
        self.availability = availability

    def setprice(self, price):
        self.price = price

    def setassigned_passenger(self, assigned_passenger):
        self.assigned_passenger = assigned_passenger

    def getseat_number(self):
        return self.seat_number

    def gettype(self):
        return self.type
#This function looks for availability
    def is_available(self):
        return self.availability
#setter method to all attributes
    def getprice(self):
        return self.price

    def getassigned_passenger(self):
        return self.assigned_passenger

    def book_seat(self, passenger_name):#This additional function books the seat for a passenger
        """
        Book the seat for a passenger.

        Args:
            passenger_name (str): The name of the passenger booking the seat.
        """
        if self.availability: #This line checks the value of the availability attribute of the seat object
            self.assigned_passenger = passenger_name #If the seat is available (availability is True), this line assigns the passenger_name passed as an argument to the assigned_passenger attribute of the seat object
            self.availability = False # After assigning the passenger to the seat, this line sets the availability attribute to False, indicating that the seat is no longer available for booking.
            print(f"Seat {self.seat_number} booked for passenger {passenger_name}.") #This line prints a message indicating that the seat has been successfully booked for the specified passenger.
        else:
            print(f"Seat {self.seat_number} is already booked.") #If the seat is not available (i.e., availability is False), this line prints a message indicating that the seat is already booked.

    def cancel_booking(self):#This additional function cancels the booking of a seat
        """
        Cancel the booking of the seat.
        """
        if not self.availability:#This line checks the value of the availability attribute of the seat object.
            self.assigned_passenger = None #If the seat is not available (availability is False), this line sets the assigned_passenger attribute of the seat object to None.
            self.availability = True #After canceling the booking, this line sets the availability attribute to True, indicating that the seat is now available for booking again.
            print(f"Booking for seat {self.seat_number} cancelled.") #This line prints a message indicating that the booking for the seat has been canceled
        else:
            print(f"Seat {self.seat_number} is not booked.") #If the seat is already available (i.e., availability is True), this line prints a message indicating that the seat is not booked.
class Aircraft: #This line defines an Aircraft class
    def __init__(self, airline, aircraft_type, number_of_seats, total_weight_capacity, pilot): ##This line uses a constructor that initialzies the attributes with the values passed as attributes
        self.airline = airline #This line sets the airline attribute of the Aircraft object to the value passed as the airline parameter
        self.aircraft_type = aircraft_type #This line sets the aircraft_type attribute of the Aircraft object to the value passed as the aircraft_type parameter
        self.number_of_seats = number_of_seats #This line sets the number_of_seats attribute of the Aircraft object to the value passed as the number_of_seats parameter
        self.total_weight_capacity = total_weight_capacity #This line sets the total_weight_capacity attribute of the Aircraft object to the value passed as the total_weight_capacity parameter
        self.pilot = pilot  #This line sets the pilot attribute of the Aircraft object to the value passed as the pilot parameter
#setter method to all attributes
    def set_airline(self, airline):
        self.airline = airline

    def set_aircraft_type(self, aircraft_type):
        self.aircraft_type = aircraft_type

    def set_number_of_seats(self, number_of_seats):
        self.number_of_seats = number_of_seats

    def set_total_weight_capacity(self, total_weight_capacity):
        self.total_weight_capacity = total_weight_capacity

    def set_pilot(self, pilot):
        self.pilot = pilot
#s]getter method to all attributes
    def get_airline(self):
        return self.airline

    def get_aircraft_type(self):
        return self.aircraft_type

    def get_number_of_seats(self):
        return self.number_of_seats

    def get_total_weight_capacity(self):
        return self.total_weight_capacity

    def get_pilot(self):
        return self.pilot
#This additional function displays all the information of the aircraft 
    def display_aircraft_info(self):
        return f"Aircraft Type: {self.aircraft_type}, Airline: {self.airline}, Seats: {self.number_of_seats}, Weight Capacity: {self.total_weight_capacity}, Pilot: {self.pilot}"

from datetime import datetime

# The Test cases
if __name__ == "__main__":
    # Test User class
    pass1 = Passenger("Hind", "BinTamim", 78420057865, "CA677452", "hind.bintamim@gmail.com", 502546000)
    pass1.setUserName("Hindbt07")
    pass1.setPassword("sGJB87")
    pass1.reset_password("sGJB87")
    pass1.send_verification_email()
    pass2 = Passenger("Rashid", "AlFalasi", 78419997805, "BK677401", "Rashid.alfalasi@gmail.com", 50855005)
    pass2.setUserName("Rashid08")
    pass2.setPassword("rr123")
    pass2.reset_password("rashid08f")
    pass2.send_verification_email()
    print('Passenger 1 details:')
    print('First Name:', pass1.getFirstName())
    print('Last Name:', pass1.getLastName())
    print('Username:', pass1.getUserName())
    print('Password:', pass1.getPassword())
    print('ID:', pass1.getID())
    print('Passport Number:', pass1.getPassportNumber())
    print('Email:', pass1.getEmail())
    print('Phone Number:', pass1.getPhoneNumber())

# Printing attributes of pass2
    print('\nPassenger 2 details:')
    print('First Name:', pass2.getFirstName())
    print('Last Name:', pass2.getLastName())
    print('Username:', pass2.getUserName())
    print('Password:', pass2.getPassword())
    print('ID:', pass2.getID())
    print('Passport Number:', pass2.getPassportNumber())
    print('Email:', pass2.getEmail())
    print('Phone Number:', pass2.getPhoneNumber())

if __name__=='__main__':
    #The test boarding pass
    BoardingPass1=BoardingPass('6AICD77','Hind','Dubai','Geneva','08A','2024-02-21','8:00 AM',2, 3,'Economy Premuim')
    BoardingPass2=BoardingPass('5ADCD71','Rashid','Dubai','DOHA','09B','2024-02-21','2:00 PM',3, 1,'First Class')
    print('\nBoarding Pass 1 details:')
    print('Ticket Number:', BoardingPass1.getticket_number())
    print('Passenger Name:', BoardingPass1.getpassenger_name())
    print('Destination from:', BoardingPass1.getdestination_from())
    print('Destination from:', BoardingPass1.getdestination_to())
    print('Seat Number:', BoardingPass1.getseat_number())
    print('Date:', BoardingPass1.getdate())
    print('Time:', BoardingPass1.gettime())
    print('Gate:', BoardingPass1.getgate())
    print('Terminal:', BoardingPass1.getterminal())
    print('Type:', BoardingPass1.gettype())
    print('Boarding Pass 2 details:', BoardingPass2.display_boarding_info())#this line displays the boarding pass information using the display function instead of the getter
if __name__ == "__main__":
    # Test Flight class
    flight1 = Flight("NK4322", "2024-02-21 08:00 AM", "2024-02-21 3:40 PM", "DXB", "GVA")
    flight2 = Flight("NA4312", "2024-02-21 2:00 AM", "2024-02-21 3:00 PM", "DXB", "DOH")
    print('\nFlight1 details:')
    print('Flight number:', flight1.getflight_number())
    print('Departure Time:', flight1.getdeparture_time())
    print('Arrival Time:', flight1.getarrival_time())
    print('Departure Location:', flight1.getdeparture_location())
    print('Arrival Location:', flight1.getarrival_location())
    print("Flight 1 duration is:", flight1.calculate_flight_duration())
    print("Flight 1 Delay status is:", flight1.check_delay())
    print('Fkight 2 details:', flight2.displayFlightinfo()) #here instead of the getter method this line uses the display info function
    print("Flight 2 duration is:", flight2.calculate_flight_duration())
    print("Flight 2 Delay status is:", flight2.check_delay())

if __name__ == "__main__":
    # Test Seat class
    seat1 = Seat("08A", "Economy Premium", True, 3700, 'Hind')
    seat1.book_seat("Hind BinTamim")  # Book the seat
    seat1.book_seat("Maitha AlKaabi")  # Try booking the same seat again
    seat1.cancel_booking()  # Cancel the booking
    seat1.book_seat("Maitha AlKaabi")  # after cancellation try booking
    print('Seat Number 1:', seat1.getseat_number())
    print('Type:', seat1.gettype())
    print('The seat is avaiable:', seat1.is_available())
    print('The ticket price:', seat1.getprice())
    print('The assigned passenger:', seat1.getassigned_passenger())
# Test cases for Aircraft class
if __name__ == "__main__":
    # Create an instance of Aircraft
    aircraft1 = Aircraft("Emirates", "Boeing 777", 300, 150000, "Hamad AlMarri")

    # Display aircraft information
    print("Aircraft Information:")
    print(aircraft1.display_aircraft_info())

    # Update airline and pilot
    aircraft1.set_airline("Etihad")
    aircraft1.set_pilot("Khalid AlAli")

    # Display updated information
    print("\nUpdated Aircraft Information:")
    print(aircraft1.display_aircraft_info())
